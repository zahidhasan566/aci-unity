<?php

namespace App\Http\Controllers;

use App\Models\Awards;
use App\Models\EventSchedule;
use App\Models\Feedback;
use App\Models\Photos;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Validator;

class EventScheduleController extends Controller
{
    public function index(){
        $userId = auth()->user()->UserId;
        $eventInfo = EventSchedule::with(['feedback' => function ($query) use ($userId) {
            $query->where('UserId', $userId)->select('EventSchedule.*,')}])->get();;
        return response()->json([
            'eventInfo' => $eventInfo,
        ]);


    }

    public function storeEventFeedback(Request $request){
        $validator = Validator::make($request->all(), [
            'rating' => 'required',
            'feedback' => 'required',
        ]);
        if ($validator->fails()) {
            return response()->json(['status' => 401, 'error' => $validator->errors()]);
        }
        try{
            $feedback = new Feedback();
            $feedback->UserId = auth()->user()->UserId;
            $feedback->SessionID = $request->event['ScheduleID'];
            $feedback->Rating = $request->rating;
            $feedback->Comments = $request->feedback;
            $feedback->SubmittedAt = Carbon::now();
            $feedback->save();

            return response()->json([
                'status' => 'Success',
                'message' => 'Feedback submitted successfully!'
            ],200);
        }
        catch (\Exception $exception) {
            DB::rollBack();
            return response()->json([
                'status' => 'error',
                'message' => 'Something went wrong!' . $exception->getMessage()
            ], 500);
        }


        dd($request);
    }

}
