<?php

namespace App\Http\Middleware;

use App\Models\User;
use App\Models\UserManager;
use Closure;
use Illuminate\Http\Request;
use Tymon\JWTAuth\Facades\JWTAuth;

class JwtMiddleware
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure(\Illuminate\Http\Request): (\Illuminate\Http\Response|\Illuminate\Http\RedirectResponse)  $next
     * @return \Illuminate\Http\Response|\Illuminate\Http\RedirectResponse
     */
    public function handle(Request $request, Closure $next)
    {
        try {
            // Try both guards explicitly
            foreach (['api', 'api_second'] as $guard) {
                try {
                    $token = JWTAuth::parseToken();
                    $payload = $token->getPayload();
                    dd($payload);
                    // Manually verify the token
                    if (JWTAuth::manager()->getJWTProvider()->decode($token->getToken())) {

                        // Get user based on guard
                        $user = $guard === 'api_second'
                            ? UserManager::find($payload->get('sub'))
                            : User::find($payload->get('sub'));

                        if ($user) {
                            auth()->shouldUse($guard);
                            auth()->setUser($user);
                            return $next($request);
                        }
                    }
                } catch (\Exception $e) {
                    continue; // Try next guard
                }
            }

            throw new \Exception('Authentication failed');
        } catch (\Exception $e) {
            if ($e instanceof \Tymon\JWTAuth\Exceptions\TokenInvalidException) {
                return response()->json(['status' => 'Token is Invalid'], 401);
            } else if ($e instanceof \Tymon\JWTAuth\Exceptions\TokenExpiredException) {
                return response()->json(['status' => 'Token is Expired'], 401);
            } else {
                return response()->json(['status' => 'Authorization Token not found'], 401);
            }
        }
        return $next($request);
    }
}
